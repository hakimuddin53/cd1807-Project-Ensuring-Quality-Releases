name: Azure Pipelines
pool: AgentPoolProject3
variables:  
  environmentName: 'Test_VM'

stages:
    # - stage: "Provisioning"
    #   jobs:
    #     - job: provision_infrastructure
    #       displayName: "Provision Infrastructure"
    #       pool: AgentPoolProject3
    #       steps:
    #         - task: DownloadSecureFile@1
    #           displayName: "Download terraform.tfvars file"
    #           name: tfvars
    #           inputs:
    #             secureFile: "terraform.tfvars"
  
    #         - task: Bash@3
    #           displayName: "Copy terraform.tfvars file"
    #           inputs:
    #             targetType: "inline"
    #             script: |
    #               #!/bin/bash
    #               sudo cp $(tfvars.secureFilePath) terraform/environments/test/terraform.tfvars
  
    #         - task: TerraformInstaller@0
    #           displayName: "Install Terraform"
    #           inputs:
    #             terraformVersion: '0.14.11'
  
    #         - task: TerraformTaskV1@0
    #           displayName: "Terraform Init"
    #           inputs:
    #             provider: "azurerm"
    #             command: "init"
    #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
    #             backendServiceArm: "MyServiceConnection"
    #             backendAzureRmResourceGroupName: "Azuredevops"
    #             backendAzureRmStorageAccountName: "tfstate176319980"
    #             backendAzureRmContainerName: "tfstate"
    #             backendAzureRmKey: "qhVBb4HgY3fH9rIwYTUjQe3IDZNZV9xCRQUKidanXxIlX/ehQga69jf5ByLCdg4lNXE2sGLPRrpW+AStvqlDvg=="
  
    #         - task: TerraformTaskV1@0
    #           displayName: "Terraform Validate"
    #           inputs:
    #             provider: "azurerm"
    #             command: "validate"
    #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
  
    #         - task: TerraformTaskV1@0
    #           displayName: "Terraform Plan"
    #           inputs:
    #             provider: "azurerm"
    #             command: "plan"
    #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
    #             environmentServiceNameAzureRM: "MyServiceConnection"
  
    #         - task: TerraformTaskV1@0
    #           displayName: "Terraform Apply"
    #           inputs:
    #             provider: "azurerm"
    #             command: "apply"
    #             workingDirectory: "$(System.DefaultWorkingDirectory)/terraform/environments/test/"
    #             commandOptions: "-auto-approve"
    #             environmentServiceNameAzureRM: "MyServiceConnection"  
  
    - stage: "Build"
      jobs:
      - job: build_artifacts
        displayName: "Build Artifacts"
        steps: 
        # Postman - Install Newman    
        # ToDo: Update the command and verify the working directory
        - task: NodeTool@0
          displayName: Install Node v12.X
          inputs:
            versionSpec: '12.x'
        - bash: |
                npm install -g newman
                mkdir -p log/newman
          displayName: Install Newman CLI
        # Postman Data Validation Test Suite    
        # ToDo: Verify the working directory
        - task: CmdLine@2
          displayName: Run Data Validation Tests
          continueOnError: true
          inputs:
            script: 'newman run udacity-validation-test-project-3.postman_collection.json -e udacity-environment.postman_environment.json --reporters cli,junit --reporter-junit-export Postman-TEST-DataValidation.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        # Postman Regression Test Suite    
        # ToDo: Verify the working directory
        
        - task: CmdLine@2
          displayName: Run Regression Tests
          continueOnError: true
          inputs:
            script: 'newman run udacity-regression-test-project-3.postman_collection.json -e udacity-environment.postman_environment.json --reporters cli,junit --reporter-junit-export Postman-TEST-Regression.xml'
            workingDirectory: '$(System.DefaultWorkingDirectory)/automatedtesting/postman'
        # Postman - Publish Results         
        - task: PublishTestResults@2
          inputs:
            testResultsFormat: 'JUnit'
            testResultsFiles: '**/Postman-TEST-*.xml'
            searchFolder: '$(System.DefaultWorkingDirectory)'
            mergeTestResults: true
            testRunTitle: 'Regression test results'

        #--------------------------------------------#
        # Selenium (UI) Test Suite - Archive the package  
        # "ArchiveFiles@2" picks up the web package and archives it.
        - task: ArchiveFiles@2
          displayName: 'Archive UI Tests'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/selenium'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-ui-test.zip'
        # Selenium Test Suite - Publish the package  
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-selenium-ui-test.zip 
          displayName: 'Upload Package'
          artifact: drop-selinium-ui-test

        #--------------------------------------------#    
        # FakeRestAPI - Archive
        - task: ArchiveFiles@2
          displayName: 'Archive FakeRestAPI'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter/fakerestapi'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip'
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-fakerestapi.zip
          displayName: 'Upload Package'
          artifact: drop-fakerestapi-test

        #--------------------------------------------#  
        # JMeter (Performance) Test Suite - Archive
        - task: ArchiveFiles@2
          displayName: 'Archive PerformanceTestSuite'
          inputs:
            rootFolderOrFile: '$(System.DefaultWorkingDirectory)/automatedtesting/jmeter'
            includeRootFolder: false
            archiveType: 'zip'
            archiveFile: '$(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetests.zip'
        # JMeter Test Suite - Publish    
        - publish: $(Build.ArtifactStagingDirectory)/$(Build.BuildId)-performancetests.zip
          displayName: 'Upload Package'
          artifact: drop-performancetests

    - stage: Deploy
      jobs:
      #--------------------------------------------#  
      # Deploy FakeRestAPI Web App
      - deployment: FakeRestAPI   
        environment: Test_VM
        strategy:
          runOnce:
            deploy:
              steps:
              - task: AzureWebApp@1
                displayName: 'Deploy Azure Web App'
                inputs:
                  azureSubscription: 'MyServiceConnection'
                  appName: 'Web-App-Azure-Devops-Project-3'
                  appType: webApp
                  package: $(Pipeline.Workspace)/drop-fakerestapi-test/$(Build.BuildId)-fakerestapi.zip
                  deploymentMethod: zipDeploy
              #--------------------------------------------#    
              # Stress Test
              - task: CmdLine@2
                inputs:
                  script: |
                    wget "https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz"
                    tar -xf apache-jmeter-5.5.tgz
                    unzip -o $(Build.BuildId)-performancetests.zip
                    ./apache-jmeter-5.5/bin/jmeter -n -t stress-test.jmx -l $(Build.BuildId)-jmeter_stress.log -e -o /home/devopsagent/$(Build.BuildId)_Stress_Test_Logs/
                    cat jmeter.log
                  workingDirectory: $(Pipeline.Workspace)/drop-performancetests
       
              # Endurance Test
              - task: CmdLine@2
                inputs:
                  script: |
                    wget "https://dlcdn.apache.org/jmeter/binaries/apache-jmeter-5.5.tgz"
                    tar -xf apache-jmeter-5.5.tgz
                    unzip -o $(Build.BuildId)-performancetests.zip
                    ./apache-jmeter-5.5/bin/jmeter -n -t endurance-test.jmx -l $(Build.BuildId)-jmeter_endurance.log -e -o /home/devopsagent/$(Build.BuildId)_Endurance_Test_Logs/
                    cat jmeter.log
                  workingDirectory: $(Pipeline.Workspace)/drop-performancetests                  

                  
      #--------------------------------------------#  
      # Selenium | Functional UI Tests
      # ToDo: 
      - deployment: VMDeploy
        displayName: Selenium Tests
        environment: Test_VM
        strategy:
          runOnce:
            deploy:
              steps:
              - download: current
                artifact: drop-selinium-ui-test
                
              - task: Bash@3
                inputs:
                  targetType: 'inline'
                  script: |           
                    #! /bin/bash
                    
                    sudo apt-get upgrade -y
                    sudo apt-get install python3-pip -y
                    sudo apt-get install unzip -y
                    sudo apt-get install -y chromium-browser
                    pip3 install selenium
                    cd ~/
                    DIR=/home/devopsagent/app
                    if [ ! -d "$DIR" ]; then
                        mkdir app
                    fi
                    mv $(Pipeline.Workspace)/drop-selinium-ui-test/$(Build.BuildId)-selenium-ui-test.zip app
                    cd app
                    unzip -o $(Build.BuildId)-selenium-ui-test.zip
                    FILE=/home/devopsagent/app/chromedriver_linux64.zip
                    if [ ! -f "$FILE" ]; then
                        LATEST=$(wget -q -O - http://chromedriver.storage.googleapis.com/LATEST_RELEASE)
                        wget http://chromedriver.storage.googleapis.com/$LATEST/chromedriver_linux64.zip
                        unzip -o chromedriver_linux64.zip
                        sudo ln -s $PWD/chromedriver /usr/local/bin/chromedriver
                    fi
                    export PATH=$PATH:/home/devopsagent/app
                    echo "Starting Selenium Tests"
                    pwd
                    python3 add_remove_from_cart.py >> selenium.log
                    cat selenium.log
                    echo "Completed Selenium Tests. Check selenium.log for results."
